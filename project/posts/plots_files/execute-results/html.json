{
  "hash": "17b2f6b09a7b3dd2f044298e6f14ab99",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plots\"\nformat: \n  html: \n    highlight-style: dracula\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n#read in the data\ndata <- readr::read_csv(here::here('data/barbenheimr.csv'))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1000 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): ppt_id, sex, employment_status, birth_country\ndbl (11): age, annual_income, iq, ig_followers, twitter_followers, history_c...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n#view the codebook\ncodebook <- readr::read_csv(here::here('data/codebook.csv'), show_col_types = F)\n\npupluv_tib <- readr::read_csv(\"https://www.discovr.rocks/csv/puppy_love.csv\") |>\n  dplyr::mutate(\n    dose = forcats::as_factor(dose)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): id, dose\ndbl (2): happiness, puppy_love\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n## Scatterplots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata |> \n  ggplot(aes(x = ig_followers, y = annual_income)) +\n  geom_point(position = \"jitter\", alpha = .4, colour = \"darkcyan\") +\n  scale_x_continuous(limits = c(0,3000),\n                     breaks = seq(0,3000, by = 500),\n                     name = \"Insta followers\") +\n  scale_y_continuous(limits = c(0,125000),\n                     breaks = seq(0,125000, by = 25000),\n                     name = \"Annual income\") +\n  #or for labels could do:\n  #labs(x = \"Insta followers\", y = \"Annual income\")\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#another example - using colour\nggplot2::ggplot(pupluv_tib, aes(x = puppy_love, y = happiness, colour = dose, fill = dose)) +\n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  coord_cartesian(ylim = c(0, 10)) +\n  scale_x_continuous(breaks = 0:7) +\n  scale_y_continuous(breaks = 0:10) +\n  labs(x = \"Puppy love (0-7)\", y = \"Happiness (0-10)\", colour = \"Treatment\", fill = \"Treatment\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\n\n## Violin plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data, aes(employment_status, annual_income)) +\n  geom_violin() +\n  stat_summary(fun.data = \"mean_cl_boot\") +\n  labs(x = \"Employment Status\", y = \"Annual income\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#another example - using colour\nggplot2::ggplot(pupluv_tib, aes(x = dose, y = happiness, colour = dose)) +\n  geom_point(position = position_jitter(width = 0.1), alpha = 0.6) +\n  geom_violin(alpha = 0.2) + \n  stat_summary(fun.data = \"mean_cl_normal\", geom = \"pointrange\", position = position_dodge(width = 0.9)) +\n  coord_cartesian(ylim = c(0, 10)) +\n  scale_y_continuous(breaks = 0:10) +\n  labs(x = \"Puppy therapy group\", y = \"Happiness (0-10)\", colour = \"Puppy therapy group\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n\n## GGally - ggscatmat() - visualising data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGGally::ggscatmat(data, columns = c(\"age\", \"annual_income\", \"barbie_rating\", \"iq\")) +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Using cool colours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"MetBrewer\")\nlibrary(MetBrewer)\n\nggplot(data, aes(x = employment_status, fill = employment_status)) +\n  geom_bar() +\n  labs(x = \"Employment Status\", y = \"Count\") +\n  theme_bw() + \n  scale_fill_manual(values = \n                      met.brewer(\"Tam\", \n                                 n = 5,\n                                 type = \"continuous\"))\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nOptions for MetBrewer: <https://www.blakerobertmills.com/my-work/met-brewer#:~:text=%7BMetBrewer%7D%20is%20an%20R%20package%20that%20provides%20color,18%20colorblind-friendly.%20Full%20documentation%20can%20be%20found%20here.>\n",
    "supporting": [
      "plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}