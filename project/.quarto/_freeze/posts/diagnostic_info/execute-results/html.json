{
  "hash": "867bd044d8ced06f155b0da3a839cd3c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Diagnostic plots and outliers\"\nformat: \n  html: \n    highlight-style: dracula\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n#read in the data\nstar <- readr::read_csv(\"https://drmankin.github.io/disc_stats/star.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2161 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (28): gender, ethnicity, birth, stark, star1, star2, star3, lunchk, lunc...\ndbl (20): readk, read1, read2, read3, mathk, math1, math2, math3, experience...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nread_full_lm <- lm(read1 ~ readk + mathk,\n                   data = star)\n```\n:::\n\n\n\n## Diagnostic plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(read_full_lm, which = 1:6)\n```\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-3-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-3-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-3-6.png){width=672}\n:::\n:::\n\n\n\n### Pretty residual plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"ggfortify\")\nggplot2::autoplot(read_full_lm, \n                  which = 1:4,\n                  colour = \"darkcyan\", \n                  smooth.colour = \"purple\", \n                  alpha = .3, \n                  size = .5) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](diagnostic_info_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Influential cases and outliers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#augment gets the residuals\n#rowid_to_column gets the case number and creates a column (we've decided to call it case_no)\n#so we get a tibble of diagnostic stats and the case number for each\n\nread_full_res <- read_full_lm |> \n  broom::augment() |> \n  tibble::rowid_to_column(var = \"case_no\") \n\n\n#we then use this tibble\n#filter to get the rows with absolute value of standard residual >= 1.96 (95% of data)\n#selected the columns we are interested in: case number, standard residual, and residual\n#arranged it by standard residual - smallest first \nread_full_res |> \n  dplyr::filter(abs(.std.resid) >= 1.96) |>\n  dplyr::select(case_no, .std.resid, .resid) |> \n  dplyr::arrange(.std.resid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 121 × 3\n   case_no .std.resid .resid\n     <int>      <dbl>  <dbl>\n 1    1189      -3.47  -149.\n 2      31      -3.27  -140.\n 3    1071      -3.01  -129.\n 4     158      -2.92  -125.\n 5     837      -2.92  -125.\n 6    1995      -2.89  -124.\n 7    2050      -2.86  -123.\n 8    1820      -2.83  -121.\n 9    1663      -2.82  -121.\n10     627      -2.72  -116.\n# ℹ 111 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nread_full_res |> \n  dplyr::filter(abs(.std.resid) >= 2.5) |>\n  dplyr::select(case_no, .std.resid, .resid) |> \n  dplyr::arrange(.std.resid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 39 × 3\n   case_no .std.resid .resid\n     <int>      <dbl>  <dbl>\n 1    1189      -3.47  -149.\n 2      31      -3.27  -140.\n 3    1071      -3.01  -129.\n 4     158      -2.92  -125.\n 5     837      -2.92  -125.\n 6    1995      -2.89  -124.\n 7    2050      -2.86  -123.\n 8    1820      -2.83  -121.\n 9    1663      -2.82  -121.\n10     627      -2.72  -116.\n# ℹ 29 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nread_full_res |> \n  dplyr::filter(abs(.std.resid) >= 3) |>\n  dplyr::select(case_no, .std.resid, .resid) |> \n  dplyr::arrange(.std.resid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  case_no .std.resid .resid\n    <int>      <dbl>  <dbl>\n1    1189      -3.47  -149.\n2      31      -3.27  -140.\n3    1071      -3.01  -129.\n4    1678       3.07   132.\n5    1157       3.07   132.\n6    1347       3.10   133.\n7    1475       3.27   140.\n8     383       3.36   144.\n```\n\n\n:::\n\n```{.r .cell-code}\n#using tibble of diagnostic info\n#arranging tibble by descending cooks value \n#selecting only case number and cooks value\n#to see if any are bigger than 1 \nread_full_res |> \n  dplyr::arrange(desc(.cooksd)) |>\n  dplyr::select(case_no, .cooksd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,161 × 2\n   case_no .cooksd\n     <int>   <dbl>\n 1      31 0.0190 \n 2      79 0.0149 \n 3    2095 0.0132 \n 4    1820 0.0129 \n 5     952 0.0113 \n 6    1475 0.00940\n 7     383 0.00938\n 8    1071 0.00929\n 9    1189 0.00827\n10    1795 0.00782\n# ℹ 2,151 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [
      "diagnostic_info_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}